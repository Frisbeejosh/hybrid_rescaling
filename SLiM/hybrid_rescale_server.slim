initialize() {
    initializeSLiMModelType("nonWF");
    
    	//command-line constants:
//	 defineConstant('log_dir', '/Users/joshfelton/github/felton_scripts/slim_modeling/class_project');
//	 defineConstant('job_no', 7);
//	 defineConstant('Q', 20);
	
		// the number of mutations in the sim	
	defineConstant("NUM_MUTS", 3);
	
		// define base constants
	 defineConstant("L", 9999);
    defineConstant("BASE_POP_SIZE", 50000);
    defineConstant("POP_SIZE", asInteger(BASE_POP_SIZE / Q));
    defineConstant("BURN_IN_TIME", 10*POP_SIZE);
    defineConstant("RUN_TIME", 4*POP_SIZE+BURN_IN_TIME);
    
    	// define storage directory
	defineConstant("STORE_DIR", log_dir + "Q" + Q);
	
		// create matrices to store mutation and fixation counts
	defineGlobal("MUT_COUNT_VEC", rep(0,NUM_MUTS));
	defineGlobal("FIX_COUNT_VEC", rep(0,NUM_MUTS));

    // mutation types (all convert so we garbage-collect fixes)
    initializeMutationType("m1", 0.5, "f", Q*0.0); m1.convertToSubstitution = T;
    initializeMutationType("m2", 0.5, "g", Q*0.000, 0.270); m2.convertToSubstitution = T;
    initializeMutationType("m3", 0.5, "f", Q*0.01);           m3.convertToSubstitution = T;

    initializeGenomicElementType("g1", c(1,2,3), c(0.286, 0.7086, 0.0054));
    initializeGenomicElement(g1, 0, 9999);

    initializeMutationRate(Q * 5.49e-9);
    initializeRecombinationRate(Q * 1e-8);
}

1 first() {
	sim.addSubpop("p1", POP_SIZE);
}

1 early() {
	// create the storage directory
	createDirectory(STORE_DIR);
	
	community.registerLateEvent(NULL, '{end();}', RUN_TIME, RUN_TIME);
	community.registerEarlyEvent(NULL, '{create_metrics();}', BURN_IN_TIME, BURN_IN_TIME);
	community.registerEarlyEvent(NULL, '{print_gen();}', 2, RUN_TIME);
	sim.registerMutationCallback(NULL, '{return mut_callback(mut);}', NULL, NULL, BURN_IN_TIME, RUN_TIME);
	defineGlobal('start_clock', clock('mono'));
}

// this reproduction() callback *is* allowed to call addCloned()
reproduction() {
    rem = sim.cycle % Q;

    if (rem < Q-1) {
        // neutral sub-generation: "clone" and pass down one offspring
subpop.addSelfed(individual);

    } else {
        /// drift+selection sub‐step:
        // draw *one* parent from the current cohort, with replacement,
        // weighted by each individual’s absolute fitness (fitnessScaling)
       inds   = subpop.individuals;
sampled = sample(
    inds,                   // vector of Individuals
    1,                      // draw 1
    T,                      // with replacement
    inds.fitnessScaling     // weight by each individual's absolute fitness
);
    mother = sample(inds, 1)[0];
    father = sample(inds, 1)[0];
    subpop.addCrossed(mother, father);
    }
}

late() {
    // now remove the *old* generation (parents), leaving only the newborns
    olds   = p1.individuals;
    toKill = olds[ olds.age > 0 ];
    sim.killIndividuals(toKill);
}

// at exactly tick 20000, end the simulation
100000 late() {
    sim.simulationFinished();
}

// modify mutation callback to count all mutations
function (logical$)mut_callback(object$ mutation) {
	mut_id = mutation.mutationType.id;
	MUT_COUNT_VEC[mut_id -1] = MUT_COUNT_VEC[mut_id-1] + 1;
	return T;
}

function (void)create_metrics(void){
	
	// kcreate the headers for the fractions of mutations fixed file
	headers = paste('m' + sim.mutationTypes.id, sep=",");
	writeFile(STORE_DIR + "/fixation_prob_" + asString(job_no) + ".csv", headers, append=F);
	// create the headers for the fixation time file	
	to_write = ("mutation_id" + "," + "origin_gen" + "," + "fix_gen");
	writeFile(STORE_DIR + "/fixation_" + asString(job_no) + ".csv", to_write, append=F);


}

function (void)end(void){
	
	for (mut in sim.substitutions){
		if (mut.originTick > BURN_IN_TIME){
			col = mut.mutationType.id - 1;
			FIX_COUNT_VEC[col] = FIX_COUNT_VEC[col] + 1;
			to_write = ("m" + mut.mutationType.id + "," + mut.originTick + "," +  mut.fixationTick);
			writeFile(STORE_DIR + "/fixation_" + asString(job_no) + ".csv", to_write, append=T);
		}
	}
	
	fix_prob = FIX_COUNT_VEC/MUT_COUNT_VEC;
	to_write = paste(fix_prob, sep=",");
	writeFile(STORE_DIR + "/fixation_prob_" + asString(job_no) + ".csv", to_write, append=T);
	p1.outputVCFSample(100, filePath = STORE_DIR + "/sample_" + asString(job_no) + ".vcf");
	
	sim.simulationFinished();
}

function (void)print_gen(void){
	if (sim.cycle % 10 == 0){
		pos = asInteger((sim.cycle/RUN_TIME)*20);
		prog_bar = paste0('[', rep('█', pos), rep('-', 20-pos), "]");
		print(prog_bar);
		print(paste0('Generation ', sim.cycle, ' / ', RUN_TIME));
		elapsed_time = asInteger(clock('mono') - start_clock);
		print(paste0('Elapsed Time:', formatTime(elapsed_time)));
		eta = (RUN_TIME - sim.cycle) * (elapsed_time / sim.cycle);
		print(paste0('ETA:', formatTime(eta)));
	
	}

}

function (string$)formatTime(numeric$ elapsed_seconds){
	
	total_mins = asInteger(elapsed_seconds / 60);
	secs = format("%.2i", asInteger(elapsed_seconds % 60));
	hours = format("%.2i", asInteger(total_mins / 60));
	mins = format("%.2i", asInteger(total_mins % 60));
	return(paste0(hours, ':', mins, ':', secs));

}